
13_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  4 .ARM          00000000  08000340  08000340  00010348  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000340  08000348  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000340  08000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000344  08000344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000348  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000348  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000689  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000195  00000000  00000000  00010a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00010b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  00010be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196da  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000007f5  00000000  00000000  0002a2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e6f5  00000000  00000000  0002aaef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b91e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000084  00000000  00000000  000b9234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000328 	.word	0x08000328

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000328 	.word	0x08000328

08000204 <main>:
#include <stdio.h>
#include "STM32F446xx.h"

//void CAN_Init() {
int main()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    // Habilitar reloj para CAN1 y GPIO
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000208:	4b1c      	ldr	r3, [pc, #112]	; (800027c <main+0x78>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a1b      	ldr	r2, [pc, #108]	; (800027c <main+0x78>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000214:	4b19      	ldr	r3, [pc, #100]	; (800027c <main+0x78>)
 8000216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000218:	4a18      	ldr	r2, [pc, #96]	; (800027c <main+0x78>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800021e:	6413      	str	r3, [r2, #64]	; 0x40

    // Configurar pines GPIO para CAN1
    GPIOA->MODER |= GPIO_MODER_MODER11_1; // PA11 como AF
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x7c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a16      	ldr	r2, [pc, #88]	; (8000280 <main+0x7c>)
 8000226:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800022a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER12_1; // PA12 como AF
 800022c:	4b14      	ldr	r3, [pc, #80]	; (8000280 <main+0x7c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a13      	ldr	r2, [pc, #76]	; (8000280 <main+0x7c>)
 8000232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000236:	6013      	str	r3, [r2, #0]
    //GPIOA->AFR[1] |= (0x09 << GPIO_AFRH_AFRH3_Pos); // PA11 AF9 (CAN1_RX)
    //GPIOA->AFR[1] |= (0x09 << GPIO_AFRH_AFRH4_Pos); // PA12 AF9 (CAN1_TX)

    // Configurar CAN1
    CAN1->MCR |= CAN_MCR_RESET; // Resetear el m贸dulo CAN
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <main+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a11      	ldr	r2, [pc, #68]	; (8000284 <main+0x80>)
 800023e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000242:	6013      	str	r3, [r2, #0]
    CAN1->MCR &= ~CAN_MCR_SLEEP; // Desactivar modo de bajo consumo
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <main+0x80>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0e      	ldr	r2, [pc, #56]	; (8000284 <main+0x80>)
 800024a:	f023 0302 	bic.w	r3, r3, #2
 800024e:	6013      	str	r3, [r2, #0]

    // Configurar la velocidad de transmisi贸n (por ejemplo, 500 kbps)
    CAN1->BTR = (4 << 0) | (2 << 10) | (1 << 16) | (3 << 20);
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0x80>)
 8000252:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <main+0x84>)
 8000254:	61da      	str	r2, [r3, #28]

    // Habilitar CAN1
    CAN1->MCR &= ~CAN_MCR_INRQ; // Salir del modo de inicializaci贸n
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <main+0x80>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <main+0x80>)
 800025c:	f023 0301 	bic.w	r3, r3, #1
 8000260:	6013      	str	r3, [r2, #0]
    while (CAN1->MSR & CAN_MSR_INAK); // Esperar a que CAN1 salga del modo de inicializaci贸n
 8000262:	bf00      	nop
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x80>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f003 0301 	and.w	r3, r3, #1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d1f9      	bne.n	8000264 <main+0x60>
 8000270:	2300      	movs	r3, #0
}
 8000272:	4618      	mov	r0, r3
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	40023800 	.word	0x40023800
 8000280:	40020000 	.word	0x40020000
 8000284:	40006400 	.word	0x40006400
 8000288:	00310804 	.word	0x00310804

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	; (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	; (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	; (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 f811 	bl	80002e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ffa1 	bl	8000204 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d0:	08000348 	.word	0x08000348
  ldr r2, =_sbss
 80002d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d8:	2000001c 	.word	0x2000001c

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <__libc_init_array>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	4d0d      	ldr	r5, [pc, #52]	; (8000318 <__libc_init_array+0x38>)
 80002e4:	4c0d      	ldr	r4, [pc, #52]	; (800031c <__libc_init_array+0x3c>)
 80002e6:	1b64      	subs	r4, r4, r5
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	2600      	movs	r6, #0
 80002ec:	42a6      	cmp	r6, r4
 80002ee:	d109      	bne.n	8000304 <__libc_init_array+0x24>
 80002f0:	4d0b      	ldr	r5, [pc, #44]	; (8000320 <__libc_init_array+0x40>)
 80002f2:	4c0c      	ldr	r4, [pc, #48]	; (8000324 <__libc_init_array+0x44>)
 80002f4:	f000 f818 	bl	8000328 <_init>
 80002f8:	1b64      	subs	r4, r4, r5
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	2600      	movs	r6, #0
 80002fe:	42a6      	cmp	r6, r4
 8000300:	d105      	bne.n	800030e <__libc_init_array+0x2e>
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f855 3b04 	ldr.w	r3, [r5], #4
 8000308:	4798      	blx	r3
 800030a:	3601      	adds	r6, #1
 800030c:	e7ee      	b.n	80002ec <__libc_init_array+0xc>
 800030e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000312:	4798      	blx	r3
 8000314:	3601      	adds	r6, #1
 8000316:	e7f2      	b.n	80002fe <__libc_init_array+0x1e>
 8000318:	08000340 	.word	0x08000340
 800031c:	08000340 	.word	0x08000340
 8000320:	08000340 	.word	0x08000340
 8000324:	08000344 	.word	0x08000344

08000328 <_init>:
 8000328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032a:	bf00      	nop
 800032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032e:	bc08      	pop	{r3}
 8000330:	469e      	mov	lr, r3
 8000332:	4770      	bx	lr

08000334 <_fini>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr
