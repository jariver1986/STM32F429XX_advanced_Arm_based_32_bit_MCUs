
12_SDIO_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005f6  00000000  00000000  000103a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000145  00000000  00000000  0001099a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00010ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196da  00000000  00000000  00010b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000818  00000000  00000000  0002a262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e695  00000000  00000000  0002aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b910f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000cc  00000000  00000000  000b9160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000354 	.word	0x08000354

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000354 	.word	0x08000354

08000204 <main>:
#include <stdint.h>
#include <stdio.h>
#include "STM32F446xx.h"

//void SDIO_Init() {
int main() {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
    // Habilitar reloj para SDIO y GPIO
    //RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_SDIOEN;

    // Configurar pines GPIO para SDIO
    GPIOD->MODER |= GPIO_MODER_MODER2_1; // PD2 como AF
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <main+0xa4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a26      	ldr	r2, [pc, #152]	; (80002a8 <main+0xa4>)
 800020e:	f043 0320 	orr.w	r3, r3, #32
 8000212:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= GPIO_MODER_MODER3_1; // PD3 como AF
 8000214:	4b24      	ldr	r3, [pc, #144]	; (80002a8 <main+0xa4>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a23      	ldr	r2, [pc, #140]	; (80002a8 <main+0xa4>)
 800021a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800021e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER8_1; // PC8 como AF
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <main+0xa8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a21      	ldr	r2, [pc, #132]	; (80002ac <main+0xa8>)
 8000226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800022a:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= GPIO_MODER_MODER9_1; // PC9 como AF
 800022c:	4b1f      	ldr	r3, [pc, #124]	; (80002ac <main+0xa8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <main+0xa8>)
 8000232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000236:	6013      	str	r3, [r2, #0]
    GPIOC->AFRH[1] |= (0x02 << GPIO_AFRH_AFRH1_Pos); // PC9 AF2 (SDIO)
	*/
    // Configurar el reloj para SDIO
    //RCC->DCKCFGR &= ~RCC_DCKCFGR_SDIOSEL; // Fuente de reloj SDIO: Sistema
    //RCC->DCKCFGR &= ~RCC_DCKCFGR_SDMMC1SEL; // Fuente de reloj SDMMC1: Sistema
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ; // Limpiar configuración de PLLQ
 8000238:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <main+0xac>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <main+0xac>)
 800023e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000242:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= (0x07 << RCC_PLLCFGR_PLLQ_Pos); // PLLQ = 8
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <main+0xac>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <main+0xac>)
 800024a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800024e:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR; // Limpiar configuración de PLLR
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <main+0xac>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <main+0xac>)
 8000256:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800025a:	6053      	str	r3, [r2, #4]
    RCC->PLLCFGR |= (0x02 << RCC_PLLCFGR_PLLR_Pos); // PLLR = 4
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <main+0xac>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <main+0xac>)
 8000262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000266:	6053      	str	r3, [r2, #4]

    // Inicializar SDIO
    SDIO->POWER = 0x00000003; // Habilitar el reloj SDIO
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <main+0xb0>)
 800026a:	2203      	movs	r2, #3
 800026c:	601a      	str	r2, [r3, #0]
    SDIO->CLKCR |= SDIO_CLKCR_CLKEN; // Habilitar el reloj
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <main+0xb0>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a10      	ldr	r2, [pc, #64]	; (80002b4 <main+0xb0>)
 8000274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000278:	6053      	str	r3, [r2, #4]
    SDIO->CLKCR |= (0x00 << SDIO_CLKCR_CLKDIV_Pos); // Configurar el divisor de frecuencia del reloj (SDIOCLK = HCLK/2)
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <main+0xb0>)
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <main+0xb0>)
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	6053      	str	r3, [r2, #4]

    // Configurar el modo de bus ancho y la velocidad del bus
    SDIO->CLKCR |= SDIO_CLKCR_WIDBUS_0; // 4 bits de bus ancho
 8000282:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <main+0xb0>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <main+0xb0>)
 8000288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800028c:	6053      	str	r3, [r2, #4]
    //SDIO->CLKCR |= SDIO_CLKCR_CLKDIV_0; // Divisor de frecuencia del reloj = 2

    // Configurar la longitud de datos y habilitar el DMA
    SDIO->DCTRL |= (0x09 << SDIO_DCTRL_DBLOCKSIZE_Pos) | SDIO_DCTRL_DMAEN | SDIO_DCTRL_DTDIR; // DMA en modo de flujo y dirección de transferencia desde la tarjeta SD
 800028e:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <main+0xb0>)
 8000290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000292:	4a08      	ldr	r2, [pc, #32]	; (80002b4 <main+0xb0>)
 8000294:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8000298:	62d3      	str	r3, [r2, #44]	; 0x2c
 800029a:	2300      	movs	r3, #0

    // Habilitar interrupciones (si es necesario)
    // NVIC_EnableIRQ(SDIO_IRQn);
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020c00 	.word	0x40020c00
 80002ac:	40020800 	.word	0x40020800
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40012c00 	.word	0x40012c00

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ff8b 	bl	8000204 <main>

080002ee <LoopForever>:

LoopForever:
  b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	4d0d      	ldr	r5, [pc, #52]	; (8000344 <__libc_init_array+0x38>)
 8000310:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000312:	1b64      	subs	r4, r4, r5
 8000314:	10a4      	asrs	r4, r4, #2
 8000316:	2600      	movs	r6, #0
 8000318:	42a6      	cmp	r6, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	4d0b      	ldr	r5, [pc, #44]	; (800034c <__libc_init_array+0x40>)
 800031e:	4c0c      	ldr	r4, [pc, #48]	; (8000350 <__libc_init_array+0x44>)
 8000320:	f000 f818 	bl	8000354 <_init>
 8000324:	1b64      	subs	r4, r4, r5
 8000326:	10a4      	asrs	r4, r4, #2
 8000328:	2600      	movs	r6, #0
 800032a:	42a6      	cmp	r6, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f855 3b04 	ldr.w	r3, [r5], #4
 8000334:	4798      	blx	r3
 8000336:	3601      	adds	r6, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f855 3b04 	ldr.w	r3, [r5], #4
 800033e:	4798      	blx	r3
 8000340:	3601      	adds	r6, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr
